{"version":3,"sources":["components/Persons/Person/Person.js","components/Persons/Persons.js","App.js","serviceWorker.js","index.js"],"names":["StyledDiv","styled","div","Person","props","onClick","click","name","age","type","onChange","changed","value","persons","map","person","index","clicked","key","id","event","StyledButton","button","alt","App","state","showPersons","deletePersonHandler","splice","setState","nameChangedHandler","personIndex","findIndex","target","togglePersonsHandler","doesShow","this","Persons","className","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"mmBAKA,IAAMA,EAAYC,IAAOC,IAAV,KAuBAC,EAVA,SAACC,GAEZ,OACI,kBAACJ,EAAD,KACI,uBAAGK,QAASD,EAAME,OAAlB,QAA+BF,EAAMG,KAArC,aAAqDH,EAAMI,IAA3D,cACA,2BAAOC,KAAK,OAAOC,SAAUN,EAAMO,QAASC,MAAOR,EAAMG,SCVtDM,EAVC,SAACT,GAAD,OACZA,EAAMS,QAAQC,KAAI,SAACC,EAAQC,GACvB,OAAO,kBAAC,EAAD,CACLT,KAAMQ,EAAOR,KACbC,IAAKO,EAAOP,IACZF,MAAO,kBAAMF,EAAMa,QAAQD,IAC3BE,IAAKH,EAAOI,GACZR,QAAS,SAACS,GAAD,OAAWhB,EAAMO,QAAQS,EAAOL,EAAOI,W,oQCJ1D,IAAME,EAAepB,IAAOqB,OAAV,KACI,SAAAlB,GAAK,OAAIA,EAAMmB,IAAM,MAAQ,WAO3B,SAAAnB,GAAK,OAAIA,EAAMmB,IAAM,SAAW,gBAiFzCC,E,4MA3EbC,MAAQ,CACNZ,QAAS,CACP,CAAEM,GAAI,OAAQZ,KAAM,SAAUC,IAAK,IACnC,CAAEW,GAAI,OAAQZ,KAAM,QAASC,IAAK,IAClC,CAAEW,GAAI,OAAQZ,KAAM,UAAWC,IAAK,KAEtCkB,aAAa,G,EAafC,oBAAsB,SAACX,GACrB,IAAMH,EAAO,YAAO,EAAKY,MAAMZ,SAC/BA,EAAQe,OAAOZ,EAAO,GACtB,EAAKa,SAAS,CAAEhB,QAASA,K,EAG3BiB,mBAAqB,SAACV,EAAOD,GAC3B,IAAMY,EAAc,EAAKN,MAAMZ,QAAQmB,WAAU,SAAAjB,GAAM,OAAIA,EAAOI,KAAOA,KACnEJ,EAAM,eAAQ,EAAKU,MAAMZ,QAAQkB,IACvChB,EAAOR,KAAOa,EAAMa,OAAOrB,MAC3B,IAAMC,EAAO,YAAO,EAAKY,MAAMZ,SAC/BA,EAAQkB,GAAehB,EACvB,EAAKc,SAAS,CACZhB,QAASA,K,EAIbqB,qBAAuB,WACrB,IAAMC,EAAW,EAAKV,MAAMC,YAC5B,EAAKG,SAAS,CAAEH,aAAcS,K,uDAK9B,IAAItB,EAAU,KAYd,OAXIuB,KAAKX,MAAMC,cACbb,EAEE,kBAACwB,EAAD,CACExB,QAASuB,KAAKX,MAAMZ,QACpBI,QAASmB,KAAKT,oBACdhB,QAASyB,KAAKN,sBAOhB,yBAAKQ,UAAU,OACb,4CACA,kBAACjB,EAAD,CACEhB,QAAS+B,KAAKF,qBACdX,IAAKa,KAAKX,MAAMC,aAFlB,UAKCb,O,GAjEO0B,IAAMC,WCPJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.4fc4672d.chunk.js","sourcesContent":["import React from 'react';\r\nimport './Person.css'\r\n\r\nimport styled from 'styled-components'\r\n\r\nconst StyledDiv = styled.div`\r\n    width: 60%;\r\n    margin: 16px auto;\r\n    border: 1px solid #4d4343;\r\n    box-shadow: 0 2px 3px #444444;\r\n    padding: 16px;\r\n    text-align: center;\r\n\r\n    '@media (min-width: 500px)': {\r\n        width: '450px'\r\n    }\r\n`\r\n\r\nconst Person = (props) => {\r\n\r\n    return (\r\n        <StyledDiv>\r\n            <p onClick={props.click}>I am {props.name} and I am {props.age} years old</p>\r\n            <input type=\"text\" onChange={props.changed} value={props.name} />\r\n        </StyledDiv>\r\n    )\r\n}\r\n\r\nexport default Person;","import React from 'react';\r\nimport Person from './Person/Person'\r\n\r\nconst persons = (props) => \r\n    props.persons.map((person, index) => {\r\n        return <Person\r\n          name={person.name}\r\n          age={person.age}\r\n          click={() => props.clicked(index)} \r\n          key={person.id}\r\n          changed={(event) => props.changed(event, person.id)}/>\r\n      });\r\n\r\nexport default persons;\r\n","import React from 'react';\nimport './App.css'\nimport Persons from './components/Persons/Persons'\n\nimport styled from 'styled-components'\n\nconst StyledButton = styled.button`\n  background-color: ${props => props.alt ? 'red' : 'green'};\n  color: white;\n  font: inherit;\n  border: 1px solid blue;\n  padding: 8px;\n  cursor: pointer;\n  &:hover {\n    background-color: ${props => props.alt ? 'salmon' : 'lightgreen'};\n    color: black\n  }\n`;\n\nclass App extends React.Component {\n  state = {\n    persons: [\n      { id: 123114, name: 'Bikram', age: 30 },\n      { id: 545366, name: 'Sneha', age: 27 },\n      { id: 743453, name: 'Sulekha', age: 54 }\n    ],\n    showPersons: false\n  };\n\n  // switchNameHandler = () => {\n  //   this.setState({\n  //     persons: [\n  //       { name: 'Bikram Keshari', age: 30 },\n  //       { name: 'Snehasmita', age: 27 },\n  //       { name: 'Sulekha', age: 55 }\n  //     ]\n  //   })\n  // }\n\n  deletePersonHandler = (index) => {\n    const persons = [...this.state.persons];\n    persons.splice(index, 1);\n    this.setState({ persons: persons })\n  }\n\n  nameChangedHandler = (event, id) => {\n    const personIndex = this.state.persons.findIndex(person => person.id === id);\n    const person = { ...this.state.persons[personIndex] }\n    person.name = event.target.value\n    const persons = [...this.state.persons]\n    persons[personIndex] = person\n    this.setState({\n      persons: persons\n    })\n  }\n\n  togglePersonsHandler = () => {\n    const doesShow = this.state.showPersons\n    this.setState({ showPersons: !doesShow })\n  }\n\n  render() {\n\n    let persons = null;\n    if (this.state.showPersons) {\n      persons = (\n\n        <Persons\n          persons={this.state.persons}\n          clicked={this.deletePersonHandler}\n          changed={this.nameChangedHandler}\n        />\n\n      );\n    }\n    return (\n     \n        <div className=\"App\">\n          <h1>This is app!</h1>\n          <StyledButton\n            onClick={this.togglePersonsHandler}\n            alt={this.state.showPersons}>Change\n          </StyledButton>\n\n          {persons}\n\n\n        </div>\n    \n    );\n  }\n\n\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}